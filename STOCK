import yfinance as yf
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt

# Function to download stock data from Yahoo Finance
def download_stock_data(ticker, start_date, end_date):
    stock_data = yf.download(ticker, start=start_date, end=end_date)
    return stock_data

# Function to create features for the machine learning model
def create_features(data):
    data['Date'] = data.index
    data['Year'] = data['Date'].dt.year
    data['Month'] = data['Date'].dt.month
    data['Day'] = data['Date'].dt.day
    data['DayOfWeek'] = data['Date'].dt.dayofweek
    data['WeekOfYear'] = data['Date'].dt.isocalendar().week
    return data[['Year', 'Month', 'Day', 'DayOfWeek', 'WeekOfYear']]

# Function to train and evaluate the machine learning model
def train_and_evaluate_model(features, target):
    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)
    
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    y_pred = model.predict(X_test)
    
    print('Mean Absolute Error:', mean_absolute_error(y_test, y_pred))
    
    return model

# Function to plot the predicted vs actual stock prices
def plot_predictions(y_test, y_pred):
    plt.scatter(y_test.index, y_test, label='Actual Prices', color='blue')
    plt.scatter(y_test.index, y_pred, label='Predicted Prices', color='red')
    plt.xlabel("Date")
    plt.ylabel("Stock Price")
    plt.title("Actual vs Predicted Stock Prices")
    plt.legend()
    plt.show()

# Example usage for Amazon (AMZN) stock
ticker_amzn = 'AMZN'
start_date_amzn = '2022-01-01'
end_date_amzn = '2024-01-01'

stock_data_amzn = download_stock_data(ticker_amzn, start_date_amzn, end_date_amzn)
features_amzn = create_features(stock_data_amzn)
target_amzn = stock_data_amzn['Close']

model_amzn = train_and_evaluate_model(features_amzn, target_amzn)

# Predicting on the entire dataset for visualization
all_features_amzn = create_features(stock_data_amzn)
all_predictions_amzn = model_amzn.predict(all_features_amzn)

# Plotting the predictions
plot_predictions(target_amzn, pd.Series(all_predictions_amzn, index=target_amzn.index))
